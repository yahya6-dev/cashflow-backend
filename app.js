const express = require("express")
let { GoogleSpreadsheet } = require('google-spreadsheet')
let { JWT } = require('google-auth-library')
let formidable = require("formidable")
let bodyParser = require("body-parser")



// Create express instance
let app = express()

app.use(bodyParser.urlencoded({extended:false}))
app.use(bodyParser.json({}))
let {client_email,private_key} = require("./service.json")
// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email:client_email,
  key:private_key,
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
  ],
});

// List of my document for processing various operation within google spreadsheet
const docUsers = new GoogleSpreadsheet('19Pj1IChhONqJReZ5PrnRumxAJaz9zWtmZJ4434FxMFE', serviceAccountAuth);
const docCashin = new GoogleSpreadsheet("1FZrJgseew5VLIC7Yad8GCPFHDt6Q0A0YKG1CUlhlKUE",serviceAccountAuth)
const docCashout = new GoogleSpreadsheet("1vSJ-5o9A1OCr8i5zqmME9T6MxMfh5PiK1pNdbI0I6o8",serviceAccountAuth)

let sheetUser 
let sheetCashin
let sheetCashout 

async function loadContent() {
  await docUsers.loadInfo()
  await docCashin.loadInfo()
  await docCashout.loadInfo()
  
  sheetUser = docUsers.sheetsByIndex[0];
  sheetCashin = docCashin.sheetsByIndex[0]
  sheetCashout = docCashout.sheetsByIndex[0]
  console.log("loaded")
}

// Route to retrieve all users
app.get("/users",async (req,res) => {
 await loadContent()
 let users = await sheetUser.getRows()
 let result = []
 for (let user of users) {
  result.push(user._rawData)
 }
 console.log(users)
 res.json(result)

})

// Route To get all the cashin
app.get("/cashin",async (req,res) => {
  let cashin = await sheetCashin.getRows()
  let result = []
  for (let cash of cashin) {
  result.push(cash._rawData)
 }
   
})

// Route to get all the cashout
app.get("/cashout",async (req,res) => {
  let cashout = await sheetCashout.getRows()
  let result = []
  for (let cash of cashout) {
  result.push(cash._rawData)
 }
  
})

// Route to add cashin
app.post("/add-cashin",async (req,res) => {
  let {date,title,costPerPerson,noPassengers,fromLocation,toLocation,description,user} = req.body
  const row = sheetCashin.addRow({Date:date,Title:title,["Cost Per Person"]:costPerPerson,["No of Passengers"]:noPassengers,
    Description:description,Type:"CashIn",["To Location"]:toLocation,["From Location"]:fromLocation,Amount:costPerPerson*noPassengers,user:user})
  res.json("success")

})

// Route to add cashout
app.post("/add-cashout",async (req,res) => {
  let {date,title,amount,description,user} = req.body
  const row = sheetCashout.addRow({Date:date,Title:title,Amount:amount,Description:description,Type:"Cashout",user:user})
  res.json("success")

})

// Route to update users
app.post("/modify-users",async (req,res) => {
  if (!sheetUser)
    sheetUser = await docUsers.loadInfo() 
  let rows = await sheetUser.getRows()
  console.log(rows)
  let {username,password,role,userId} = req.body
  console.log(req)
  rows[userId].assign({username,password,role})
  await rows[userId].save()
  res.json("success")


})



app.listen(process.env.PORT||8000,() => console.log("server is running"))
